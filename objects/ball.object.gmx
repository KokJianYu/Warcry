<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite_ball</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>mass = 1;

maxSpeed = 10;
friction = maxSpeed/60/4;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(keyboard_check(vk_right) &amp;&amp; place_free(x+8,y))
{
if(hspeed&lt;10)
    hspeed=10;
}
if(keyboard_check(vk_left) &amp;&amp; place_free(x,y))
{
if(hspeed&gt;-10)
    hspeed=-10;
}
if(keyboard_check(vk_up) &amp;&amp; place_free(x,y-8))
{
if(vspeed&gt;-10)
    vspeed=-10;
}
if(keyboard_check(vk_down) &amp;&amp; place_free(x,y+8))
{
if(vspeed&lt;10)
    vspeed=10;
}

if(power(vspeed,2)+power(hspeed,2)&gt;power(maxSpeed,2))
{
    vspeed = vspeed/sqrt(power(vspeed,2)+power(hspeed,2))*maxSpeed;
    hspeed = hspeed/sqrt(power(vspeed,2)+power(hspeed,2))*maxSpeed;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="ball">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//To ensure that this code run only once 
//when a ball collide with a ball
//as the collision event occurs twice
//when the ball collide with the ball
if(self.id&lt;other.id)
{
//Getting VDiff for 2 colliding objects
//speed of this object over colliding object
//in order to get the speed in the direction
// of the this object

Vx = self.hspeed - other.hspeed;
Vy = self.vspeed - other.vspeed;

//Get the colliding vector in the direction of
//this object to colliding object
cVx = other.x - x;
cVy = other.y - y;

//normalise colliding vector
noToNormalise = sqrt(power(cVx,2) + power(cVy,2));
cuVx = cVx/noToNormalise;
cuVy = cVy/noToNormalise;

//Call the collision method for both the balls.
collision(self,cuVx,cuVy,Vx,Vy);
collision(other,-cuVx,-cuVy,-Vx,-Vy);
}
/*
Vx = hspeed;
Vy = vspeed;

//noToNormalise = sqrt(power(vx,2) + power(vy,2));

//uVx = vx/noToNormalise;
//uVy = vy/noToNormalise;

cVx = other.x - x;
cVy = other.y - y;


noToNormalise = sqrt(power(cVx,2) + power(cVy,2));
cuVx = cVx/noToNormalise;
cuVy = cVy/noToNormalise;

dotProduct = cuVx*Vx + cuVy*Vy;

rVx = dotProduct*cuVx;
rVy = dotProduct*cuVy;

changeInX = rVx*1*cuVx;
changeInY = rVy*1*cuVy;

hspeed+=changeInX;
vspeed+=changeInY;
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_wall">
      <action>
        <libid>1</libid>
        <id>115</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_bounce</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>4</kind>
            <string>1</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_dWall">
      <action>
        <libid>1</libid>
        <id>115</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_bounce</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>4</kind>
            <string>1</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
